<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vonage Audio Connector Example</title>
    <style>
      html,
      body {
        height: 100%;
        margin: 0;
        padding: 0;
        overflow: hidden;
      }
      /* Flex container for the streams */
      .streams {
        display: flex;
        flex-wrap: wrap; /* Wrap items if more than can fit on one line */
        gap: 10px; /* Gap between streams */
        justify-content: space-between; /* Distribute streams evenly */
      }
      .stream {
        flex: 1; /* This makes each stream flex to take up as much space as possible */
        min-width: calc(
          50% - 5px
        ); /* Assuming we want a minimum of 2 streams side-by-side, considering the gap */
        height: 300px;
        border: 1px solid #ccc;
      }
    </style>
  </head>
  <body>
    <div>
      <label for="username">Username: </label>
      <input type="text" id="username" name="username" />
      <button onclick="joinRoom()">Join</button>
    </div>

    <div class="streams">
      <!-- Placeholder divs for the streams. You can replace these with actual stream containers or add more as needed. -->
    </div>

    <button
      id="start-transcribe"
      style="display: none"
      onclick="startTranscribe()"
    >
      Start Transcription
    </button>

    <script src="https://static.opentok.com/v2/js/opentok.min.js"></script>
    <!-- OpenTok SDK -->
    <script>
      let session;
      let publisher;

      function joinRoom() {
        const username = document.getElementById("username").value;
        const url = new URL(window.location.href);
        const roomName = url.pathname.split("/").pop();
        var sessionId = "<%= sessionId %>";
        var token = "<%= token %>";
        var apiKey = "<%= apiKey %>";
        publisher = OT.initPublisher("streams", {
          insertMode: "append",
          width: "100%",
          height: "100%",
        });
        session = OT.initSession(apiKey, sessionId);
        session.connect(token, function (error) {
          if (error) {
            console.error("Failed to connect:", error);
          } else {
            console.log("Connected to the session.");
            session.on("streamCreated", function (event) {
              // This is called when a new stream is created in the session
              // Subscribe to the stream that caused this event, and place it into the DOM.
              console.log("New stream in the session: ", event.stream);
              session.subscribe(event.stream, "streams", function (error) {
                if (error) {
                  console.error("Failed to subscribe:", error);
                }
                console.log("Subscribed to the stream.");
              });
            });
            // Here, you would also subscribe to streams if any are present
            session.publish(publisher, function (error) {
              if (error) {
                console.error("Failed to publish:", error);
              }
              console.log("Published to the session");
              document.getElementById("start-transcribe").style.display =
                "block";
            });
          }
        });
      }

      function startTranscribe() {
        console.log("Starting transcription", session);
        if (session) {
          const streamId = publisher.stream.id;
          const username = document.getElementById("username").value;
          const domain = window.location.origin;
          fetch(`${domain}/api/opentok/start-transcribe`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              streamId,
              sessionId: session.sessionId,
              username,
            }),
          })
            .then((response) => response.json())
            .then((data) => {
              // Handle the response from your server
              console.log(data);
            })
            .catch((error) => {
              console.error("Error:", error);
            });
        }
      }
    </script>
  </body>
</html>
